# Exercise: 2022-01-12-redknight

|[![Testing](https://github.com/bencsbalazs/2022-01-12-redknight/actions/workflows/test.yml/badge.svg)](https://github.com/bencsbalazs/2022-01-12-redknight/actions/workflows/test.yml)|[![Linting](https://github.com/bencsbalazs/2022-01-12-redknight/actions/workflows/lint.yml/badge.svg)](https://github.com/bencsbalazs/2022-01-12-redknight/actions/workflows/lint.yml)||

> Installed with automatic script

- Source file
- Basic test file
- Jest for testing (watch and coverage)
- EsLint + Prettier for code style check
- Complexity check

## Exercise

Red Knight is chasing two pawns. Which pawn will be caught, and where?

https://www.codewars.com/kata/5fc4349ddb878a0017838d0f

## Description

Input / Output
Input will be two integers:

N / n (Ruby) vertical position of Red Knight (0 or 1).
P / p (Ruby) horizontal position of two pawns (between 2 and 1000000).
Output has to be a tuple (python, haskell, Rust, prolog, C#), an array (javascript, ruby), an object (java), or a structure (C) with:

"Black" or "White" - which pawn was caught
Where it was caught (horizontal position)

Example
Input = 0, 4
Output = ("White", 8)

## Happy path User story 1

> As a user, who wants to play with the redknight game

> I want to input the position of the red knight and the pawns

> So that game will tell me which pawn was caught and where

## Scenario 1.1

> Given a user playing the game

> When the input position favours black pawn

> Then the white pawn will be caught

## Scenario 1.2

> Given a user playing the game

> When the input position favours white pawn

> Then the black pawn will be caught

### UT 1

- RedKnight game is created

### UT 2

- RedKnight game expects input

### UT 3

- Redknight game should have red knight

### UT 4

- Red knight game should have a white pawn

### UT 5

- Red knight game should have a black pawn

### UT 6

- Red knight should have horizontal position

### UT 7

- Red knight should have vertical position

### UT 8

- White pawn should have horizontal position

### UT 9

- White pawn should have vertical position

### UT 10

- Black pawn should have horizontal position

### UT 11

- Black pawn should have vertical position

### UT 12

- Red knight should have position history

### UT 13

- Black pawn should have position history

### UT 14

- White pawn should have position history

### UT 15

- Red knight position history must be an array

### UT 16

- Red knight position history must be an array with at least one element

### 17

- Red knight position history must be an array with at least one element that has to have two fields (horizontal, vertical coords.)

### UT 18

- White pawn position history must be an array

### UT 19

- White pawn position history must be an array with at least one element

### 20

- White pawn position history must be an array with at least one element that has to have two fields (horizontal, vertical coords.)

### UT 21

- Black pawn position history must be an array

### UT 22

- Black pawn position history must be an array with at least one element

### 23

- Black pawn position history must be an array with at least one element that has to have two fields (horizontal, vertical coords.)

### 24

- First input parameter is the vertical position of the red knight

### 25

- Initial horizontal position of the red knight is always 0

### 26

- Second input parameter is the horizontal positon of the white pawn

### 27

- Second input parameter is the horizontal positon of the black pawn

### 28

- The initial verical position of the white pawn is always 0

### 29

- The initial verical position of the black pawn is always 1

### 30

- The game should return some result

### 31

- The result of the game should be an array

### 32

- Game result should be an array with 2 elements

### 33

- The first element of the result should be Black or White

### 34

- The second element is a number

## User story 2

> As a user, who wants to play with the redknight game

> I want to be sure that the movement was made according to the rules

> So that I can get a correct and fair result

## Scenario 2.1

> Given the user has finished the game

> When the user checks the position changes of the knight

> Then the user will see the vertical position changed with each step

### UT 2.1.1

- Knight should have a step rule

### UT 2.1.2

- Step rule should be an object

### UT 2.1.3

- Step rule object should have a vertical value

### UT 2.1.4

- Knight should be able to move

### UT 2.1.5

- move should be a function

### UT 2.1.6

- move should change the vertical position of the knight

## Scenario 2.2

> Given the user has finished the game

> When the user checks the position changes of the knight

> Then the user will see the horizontal position changed by 2 and the vertical position changed by 1 with each step

## Scenario 2.3

> Given the user has finished the game

> When the user checks the position changes of the pawns

> Then the user will see the horizontal position changed by 1 for both pawns with each step

## Scenario 2.4

> Given the user has finished the game

> When the user checks the position changes of the pawns

> Then the user will see the horizontal position is the same for both pawns with each step

## Scenario 2.5

> Given the user has finished the game

> When the user checks the position changes of the pawns

> Then the user will see the vertical position doesn't change for the pawns during the game

## Scenario 3.6

> Given the user has finished the game

> When the user checks the position changes of the pawns and the knight

> Then the user will see the pawns move first

## User story 2

> As a user, who wants to play with the redknight game

> I want to recieve feedback after my input

> So that I can correct it if I made a mistake

## Scenario 2.1

> Given the user doesn't know the correct input

> When the user enters an incorrect input

> Then the user will see an error message

## Scenario 2.2

> Given the user has finished the game

> When the user checks the output

> Then the user will see the correct output
